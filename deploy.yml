---
- name: Deploy Docker Images
  hosts: all
  tasks:
    - name: Copy Docker Compose file from host machine to remote host
      copy:
        src: ./docker-compose.yml
        dest: ~/Downloads
    
    - name: Pull HelloWorld Docker Image
      become: true
      docker_image:
        name: hello-world
        source: pull
      register: result

    # - name: Display Docker Image Pull Result
    #   debug:
    #     var: result
    
    # - name: Change directory to Downloads
    #   become: true
    #   become_user: "{{ansible_user}}"
    #   chdir: ~/Downloads

    # Pull the Docker images from Docker Hub
    # - name: Pull the Docker images specifed in docker-compose
    #   become: true
    #   shell:
    #     cmd: "docker-compose pull"
    #     chdir: /home/rahul/Downloads

    # - name: Docker Image Pull Result
    #   become: true
    #   command: "docker-compose pull"
    #   args:
    #     chdir: "/home/rahul/Downloads"
    
    # - name: Create and start services
    #   become: true
    #   command: "docker-compose up -d"
    #   args:
    #     chdir: "/home/rahul/Downloads"


    # We don't start the containers because we need to copy the env.yaml file into the backend container
    # before we can start anything.
    # So we first create the containers so that the next command "docker cp" can run properly
    # - name: Create containers for the pulled Docker images
    #   command: docker-compose up --no-start

    # - name: Copy the env.yaml file to backend Docker container
    #   command: docker cp env.yaml fintrack-backend:/usr/src/app/env.yaml

    # Now we actually run the Docker containers because the env.yaml has been copied and the app will no longer crash
    # Detached mode is required, otherwise Jenkins build never exits
    # even though the docker-compose up command has successfully executed
    # - name: Run the pulled Docker images in detached mode
    #   command: docker-compose up -d

    # # This is added so that the Docker images of the previous builds
    # # which will now become dangling images are removed
    # - name: Prune the dangling Docker images
    #   command: docker image prune --force